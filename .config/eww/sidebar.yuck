; windows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow greeting
    :geometry (geometry :x '-20px' :y '100px' :width '660px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (greeting))

(defwindow weather
    :geometry (geometry :x '-360px' :y '100px' :width '320px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (weather))

(defwindow pacman
    :geometry (geometry :x '-20px' :y '100px' :width '320px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (pacman))

(defwindow sliders
    :geometry (geometry :x '-20px' :y '270px' :width '660px' :height '440px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (sliders))

(defwindow cal
    :geometry (geometry :x '-20px' :y '730px' :width '660px' :height '460px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (cal))

(defwindow lock
    :geometry (geometry :x '-530px' :y '1210px' :width '150px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (lock))

(defwindow logout
    :geometry (geometry :x '-360px' :y '1210px' :width '150px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (logout))

(defwindow reboot
    :geometry (geometry :x '-190px' :y '1210px' :width '150px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (reboot))

(defwindow poweroff
    :geometry (geometry :x '-20px' :y '1210px' :width '150px' :height '150px' :anchor 'top right')
    :reserve (struts :distance '70px' :side 'top')
    :windowtype 'toolbar'
    :wm-ignore false
    :stacking 'fg'
    :monitor 0
    (poweroff))


; widgets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget greeting []
    (label 
        :wrap true
        :text fortune))

(defwidget weather []
    (eventbox
        :cursor 'pointer'
        (button
            :onclick 'brave https://weather.com/weather/today'
            (box
                (box
                    :class 'weather'
                    icon)
                (box
                    :class 'sidebar-text'
                    temperature)))))

(defwidget pacman []
    (box
        (box
            :class 'icon'
            '')
        (box
            :class 'sidebar-text'
            pacman)))

(defwidget sliders []
    (box
        :orientation 'vertical'
        :valign 'center'
        (box
            :class 'battery-slider'
            :space-evenly false
            :halign 'center'
            :spacing 30
            ''
            (scale
                :value {EWW_BATTERY.BAT0.capacity}
                :active false
                :min 0
                :max 100))
        (box
            :class 'volume-slider'
            :space-evenly false
            :halign 'center'
            :spacing 30
            ''
            (scale
                :onchange 'amixer set Master {}%'
                :value {volume_two}
                :min 0
                :max 100))
        (box
            :class 'brightness-slider'
            :space-evenly false
            :halign 'center'
            :spacing 30
            '盛'
            (scale
                :onchange 'light -S {}%'
                :value {light}
                :min 0
                :max 100))))

(defwidget cal []
    (box
        :class 'calendar-container'
        (calendar
            :class 'calendar')))

(defwidget lock []
    (eventbox
        :cursor 'pointer'
        :class 'lock'
        (button
            :onclick '~/scripts/lock.sh'
            :class 'icon'
            '')))

(defwidget logout []
    (eventbox
        :cursor 'pointer'
        :class 'logout'
        (button
            :onclick 'kill -9 -1'
            :class 'icon'
            '')))

(defwidget reboot []
    (eventbox
        :cursor 'pointer'
        :class 'reboot'
        (button
            :onclick 'reboot'
            :class 'icon'
            '')))

(defwidget poweroff []
    (eventbox
        :cursor 'pointer'
        :class 'poweroff'
        (button
            :onclick 'poweroff'
            :class 'icon'
            '')))


; variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deflisten temperature
    `tail -F /tmp/weather/temperature`)

(deflisten icon
    `tail -F /tmp/weather/icon`)

(deflisten description
    `tail -F /tmp/weather/description`)

(defpoll pacman
    :interval '1h'
    `pacman -Qq | wc -l`)

(defpoll light
    :interval '1s'
    `light -G`)

(defpoll volume_two
    :interval '5s'
    `awk -F"[][]" '/Left:/ { print $2 }' <(amixer get Master) | cut -d '%' -f 1`)

(defpoll fortune
    :interval '1h'
    `fortune -as`)
